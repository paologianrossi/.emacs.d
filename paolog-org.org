* Org-Mode configuration
  Here, we configure and set up all kind of extensions and hacks for
  Org-mode.  It is mostly derived from
  http://doc.norang.ca/org-mode.html ways and ideas.

  I don't use customize for Org because it gets too complicated.

** Init
   #+begin_src emacs-lisp
     (require 'org-install)
     (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
   #+end_src

** Bindings
*** Unbind keys
    Unset =C-[= and =C-]= in org-mode: it would alter our =org-agenda-files=, but we want to handle those programmatically.
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook #'(lambda ()
                                  (local-unset-key (kbd "C-]"))
                                  (local-unset-key (kbd "C-["))))
    #+end_src

*** Custom key bindings
    - Global basic org keybindings. Note =<F8>= loops through the Agenda files.

      | Functionality         | Binding | Mnemonic  |
      |-----------------------+---------+-----------|
      | Capture a task        | C-c c   | 'c'apture |
      | Agenda submenu        | C-c a   | 'a'genda  |
      | Store link            | C-c l   | 'link'    |
      | Switch to Org buffer  | C-c b   | 'b'uffer  |
      | Loop Org agenda files | <F8>    | N/A       |

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
#+end_src

** Code in Org
   I use source code blocks now and then, especially for my init files.
   Make them easier to use by fontifying the code and making tab (almost) work.
   #+begin_src emacs-lisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+end_src

** Better visuals
   - Use UTF-8 bullets
     #+begin_src emacs-lisp
       (i-require 'org-bullets)
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
     #+end_src

** Basic preferences
   - Can't say a task is done unless all subtasks are already done.
   #+begin_src emacs-lisp
     (setq org-enforce-todo-dependencies t)
   #+end_src

   - Create new headings after the current line, instead of after the current subtree
   #+begin_src emacs-lisp
     (setq org-insert-heading-respect-content nil)
   #+end_src

   - Show context when revealing a location
   #+begin_src emacs-lisp
     (setq org-show-following-heading t)
     (setq org-show-hierarchy-above t)
     (setq org-show-siblings t)
   #+end_src

   - Adapt commands to better behave in org
     #+begin_src emacs-lisp
       (setq org-special-ctrl-a/e t)
       (setq org-special-ctrl-k t)
       (setq org-yank-adjusted-subtrees t)
     #+end_src

** Todo lists
   Define the possible stages and transitions, and how they should appear in our buffers.

   Here's how I use the various stages:

   | Stage     | Shortcut          | Meaning                                               |
   |-----------+-------------------+-------------------------------------------------------|
   | TODO      | t                 | This task is in my backlog                            |
   | WEEK      | n ('next' in GTD) | This is planned and will be done in the week          |
   | TODAY     | y                 | I'm not doing this right now, but I think I will soon |
   | DONE      | d                 | No more action is required.  Think about archiving    |
   | SOMEDAY   | s                 | I'm not planning to do this any time soon             |
   | WAITING   | w                 | Someone or something must get back to me              |
   | DELEGATED | g                 | Someone or something is expected to do this, not me   |
   | CANCELED  | c                 | I thought I had to do this, but not anymore           |
   | MEETING   | m                 | I'm meeting someone.  This is about it.               |

   #+begin_src emacs-lisp
          (setq org-use-fast-todo-selection t)
          (setq org-todo-keywords
                (quote ((sequence "TODO(t)" "WEEK(n)" "TODAY(n)" "|" "DONE(d)" "SOMEDAY(s)")
                        (sequence "WAITING(w@/!)" "DELEGATED(g@/!)" "|" "CANCELED(c@/!)" "MEETING(m)"))))

          (setq org-todo-keyword-faces
                (quote (("TODO" :foreground "yellow" :weight bold)
                        ("WEEK" :foreground "orange" :weight bold)
                        ("TODAY" :foreground "red" :weight bold)
                        ("DONE" :foreground "forest green" :weight bold)
                        ("SOMEDAY" :foreground "navy blue" :weight bold)
                        ("WAITING" :foreground "orange" :weight bold)
                        ("DELEGATED" :foreground "magenta" :weight bold)
                        ("CANCELED" :foreground "forest green" :weight bold)
                        ("MEETING" :foreground "forest green" :weight bold))))
   #+end_src

** Agenda
  - We keep agenda Org files in =~/org/=
   #+begin_src emacs-lisp
     (setq org-agenda-files (quote ("~/org/")))
     (setq org-default-notes-file "~/org/notes.org")
   #+end_src

  - Use the diary in the agenda
    #+begin_src emacs-lisp
      (setq org-agenda-include-diary t)
      (setq org-agenda-diary-file "~/org/diary.org")
    #+end_src

  - Deadlines are set for a month.  They will show up in the agenda 30 days before they're through.
    #+begin_src emacs-lisp
     (setq org-deadline-warning-days 30)
    #+end_src

  - What we want displayed in the log mode for the agenda
    #+begin_src emacs-lisp
      (setq org-agenda-log-mode-items (quote (closed state)))
    #+end_src

  - If a task is scheduled or has a timestamp, don't display it in the
    TODO list part of the agenda
    #+begin_src emacs-lisp
      (setq org-agenda-todo-ignore-scheduled t)
      (setq org-agenda-todo-ignore-timestamp t)
    #+end_src

  - We use some personalized commands for the agenda:
    + Daily agenda and all Todos (n)
    + Week appts. + Daily agenda + Work (p)
    #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            '(("n" "Agenda and all TODO's"
                             ((agenda "")
                              (alltodo "")))

              ("o" "Office daily agenda"
               ((agenda "" ((org-agenda-ndays 3)))
                (tags-todo "+PRIORITY=\"A\"")
                (tags-todo "@office|AMZN")
                (tags "INBOX")
                (todo "WAITING"))
               ((org-agenda-compact-blocks t)))

              ("x" "Column view of todo" alltodo ""
               ((org-agenda-overriding-columns-format "%3PRIORITY %30ITEM(Task) %TIMESTAMP %DEADLINE %SCHEDULED")
                (org-agenda-view-columns-initially t)))
              ))
    #+end_src

    - When showing the agenda, it should always go "fullscreen" (by
      that I mean use the whole frame).  When quitting, go back to any
      previously existing window configuration.

      #+begin_src emacs-lisp
        (defadvice org-agenda-list (around org-agenda-fullscreen activate)
          "Start agenda in fullscreen.

        After agenda loads, delete other windows.
        `org-agenda-restore-windows-after-quit' should non-nil to restore
        the previous window configuration. If `org-agenda-sticky' is
        non-nil, configurations with more than one window do not seem to
        be restored properly."
          ad-do-it
          (delete-other-windows))

        (setq org-agenda-restore-windows-after-quit t)

        (setq org-agenda-sticky nil)            ; this is required not to break this feature.
      #+end_src

** Capturing and refiling
   - The default directory for org files (where we should capture to) is =~/org/=
     #+begin_src emacs-lisp
       (setq org-directory "~/org")
     #+end_src

   - Define what we can capture, and what template to use for each

     | Template   | Shortcut | Meaning                            |
     |------------+----------+------------------------------------|
     | todo       | t        | add a todo action to the todo list |
     | note       | n        | capture a note (no action)         |
     | meeting    | m        | capture a meeting's note           |
     | phone call | p        | capture a phone call's note        |

     #+begin_src emacs-lisp
       (setq org-capture-templates
             (quote (("t" "todo" entry (file "~/org/todo.org")
                      "* TODO %?\n%U\n%a\n")
                     ("n" "note" entry (file "~/org/notes.org")
                      "* %? :NOTE:\n%U\n%a\n")
                     ("m" "Meeting" entry (file "~/org/notes.org")
                      "* MEETING wrt %? :MEETING:\n%U")
                     ("p" "Phone call" entry (file "~/org/notes.org")
                      "* PHONE %? :PHONE:\n%U"))))
     #+end_src

   - Targets include this file and any file contributing to the agenda - up to 9 levels deep
     #+begin_src emacs-lisp
       (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                        (org-agenda-files :maxlevel . 9))))
     #+end_src

   - We file directly with IDO. We need some settings to make it smooth.
     #+begin_src emacs-lisp
       (setq org-refile-use-outline-path t)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-refile-allow-creating-parent-nodes (quote confirm))
       (setq org-completion-use-ido t)
     #+end_src

   - Use the current window for indirect buffer display
     #+begin_src emacs-lisp
       (setq org-indirect-buffer-display 'current-window)
     #+end_src

** TODO Footnotes

   - check org-footnote

** Tagging
   - Define global fast tags.

     #+begin_src emacs-lisp
       (setq org-tag-persistent-alist (quote ((:startgroup)
                                              ("@offline" . ?o)
                                              ("@office" . ?a)
                                              ("@home" . ?h)
                                              (:endgroup)
                                              ("1-1" . ?1)
                                              ("SEATTLE" . ?S)
                                              ("PHONE" . ?T)
                                              ("DUBLIN" . ?D)
                                              ("PROJECT" . ?P)
                                              ("crypt" . ?k))))
  #+end_src

- Allow setting single tags without the menu
  #+begin_src emacs-lisp
    (setq org-fast-tag-selection-single-key (quote expert))
  #+end_src

** Archiving
   - Archive in =~/Documents/archived.org= under a file-based subtree, with status: =ARCHIVED=

   #+begin_src emacs-lisp
     (require 'org-archive)
     (setq org-archive-mark-done "ARCHIVED")
     (setq org-archive-location "~/Documents/archived.org::* Archive: %s")
   #+end_src

** Exporting
   - Exporting to Mediawiki is useful for wiki drafting.
     #+begin_src emacs-lisp
       (require 'ox-mediawiki)
     #+end_src

** TODO Checklists
   - Enable the checklist magic
     - Need to better document this.
     #+begin_src emacs-lisp
       (i-require 'org-checklist)
     #+end_src

** Deft
   [[http://jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing
   directories of plain text notes, inspired by Notational Velocity.
   #+begin_src emacs-lisp
     (install-packages-if-needed 'deft)
     (setq deft-extension "org")
     (setq deft-directory org-directory)
     (setq deft-text-mode 'org-mode)
     (setq deft-use-filename-as-title t)
     (global-set-key [f5] 'deft)
   #+end_src

** TODO Encryption
   - Encrypt with a symmetric key all subtrees tagged as =:crypt:= on
     save.
     #+begin_src emacs-lisp
       (i-require 'org-crypt)
       (org-crypt-use-before-save-magic)
       (setq org-tags-exclude-from-inheritance (quote ("crypt")))
       ;; GPG key to use for encryption
       ;; Either the Key ID or set to nil to use symmetric encryption.
       (setq org-crypt-key nil)
     #+end_src

     - Decrypt entr(y|ies)
       #+begin_src emacs-lisp
         (defun org-decrypt-dwim (arg)
           "Decrypt entry, but decrypt entries if ARG is passed."
           (interactive "P")
           (if arg
               (org-decrypt-entries)
             (org-decrypt-entry)))

         (add-hook 'org-mode-hook
                   (lambda ()
                     (define-key
                       org-mode-map
                       (kbd "C-c s-c") 'org-decrypt-dwim)))
       #+end_src

** Extra links
    - On the Mac, get links from external apps (e.g. current selected mail in Outlook, current page in Chrome)
      #+begin_src emacs-lisp
      (i-require 'org-mac-link)
      (add-hook 'org-mode-hook (lambda ()
                                 (define-key org-mode-map (kbd "C-c C-g") 'org-mac-grab-link)))
      #+end_src
** Journal
   For journaling we use =org-journal=.
   #+begin_src emacs-lisp
     (i-require 'org-journal)
     (setq org-journal-dir "~/Documents/Personal/journal/")
   #+end_src
