* Org-Mode configuration
Here, we configure and set up all kind of extensions and hacks for Org-mode.
It is mostly derived from http://doc.norang.ca/org-mode.html ways and ideas.

I don't use customize for Org because it gets too complicated.

** Init
#+begin_src emacs-lisp
  (require 'org-install)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+end_src

** Bindings
*** Unbind keys
Unset `C-[` and `C-]` in org-mode: it would alter our `org-agenda-files`, but we want to handle those programmatically.
#+name: org-unbind-keys
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'(lambda ()
                              (local-unset-key (kbd "C-]"))
                              (local-unset-key (kbd "C-["))))
#+end_src

*** Custom key bindings
- Global basic org keybindings. Note `<F8>` loops through the Agenda files.

#+name: org-agenda-keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)

#+end_src
*** TODO I don't use clocking anymore, but timers are sometimes still nice (esp. for things like interviews, etc.)

** Code in Org
   I use source code blocks now and then, especially for my init files.
   Make them easier to use by fontifying the code and making tab (almost) work.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

** Better visuals
   - Use UTF-8 bullets
     #+begin_src emacs-lisp
       (require 'org-bullets)
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
     #+end_src

*** TODO This should belong to general text modes
   - Whitespace and visual-line modes should be set up right
      #+begin_src emacs-lisp
        (add-hook 'org-mode-hook (lambda()
                                   (whitespace-mode 0)
                                   (visual-line-mode 1)))
      #+end_src

** Basic preferences
- Can't say a task is done unless all subtasks are already done.
#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
#+end_src

- Create new headings after the current line, instead of after the current subtree
#+begin_src emacs-lisp
    (setq org-insert-heading-respect-content nil)
#+end_src

- Show context when revealing a location
#+begin_src emacs-lisp
  (setq org-show-following-heading t)
  (setq org-show-hierarchy-above t)
  (setq org-show-siblings t)
#+end_src

- Adapt commands to better behave in org
  #+begin_src emacs-lisp
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-yank-adjusted-subtrees t)
  #+end_src

** Todo lists
Define the possible stages and transitions, and how they should appear in our buffers.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "cyan" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+end_src
** Agenda
  - We keep agenda Org files in =~/org/=
   #+begin_src emacs-lisp
     (setq org-agenda-files (quote ("~/org/")))
     (setq org-default-notes-file "~/org/refile.org")
   #+end_src

  - Use the diary in the agenda
    #+begin_src emacs-lisp
      (setq org-agenda-include-diary t)
      (setq org-agenda-diary-file "~/org/diary.org")
    #+end_src

  - Deadlines are set for a month.  They will show up in the agenda 30
    days before they're through.
    #+begin_src emacs-lisp
     (setq org-deadline-warning-days 30)
    #+end_src

  - What we want displayed in the log mode for the agenda
    #+begin_src emacs-lisp
      (setq org-agenda-log-mode-items (quote (closed state)))
    #+end_src

** Capturing and refiling
- The default directory for org files (where we should capture to) is =~/org/=
  #+begin_src emacs-lisp
    (setq org-directory "~/org")
  #+end_src

- Define what we can capture, and what template to use for each
  #+begin_src emacs-lisp
    (setq org-capture-templates
          (quote (("t" "todo" entry (file "~/org/inbox.org")
                   "* TODO %?\n%U\n%a\n")
                  ("n" "note" entry (file "~/org/notes.org")
                   "* %? :NOTE:\n%U\n%a\n")
                  ("m" "Meeting" entry (file "~/org/inbox.org")
                   "* MEETING with %? Re: %? :MEETING:\n%U")
                  ("p" "Phone call" entry (file "~/org/refile.org")
                   "* PHONE %? :PHONE:\n%U"))))
  #+end_src

- Targets include this file and any file contributing to the agenda - up to 9 levels deep
  #+begin_src emacs-lisp
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))
  #+end_src

- We file directly with IDO. We need some settings to make it smooth.
  #+begin_src emacs-lisp
    (setq org-refile-use-outline-path t)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes (quote confirm))
    (setq org-completion-use-ido t)
  #+end_src

- Use the current window for indirect buffer display
  #+begin_src emacs-lisp
    (setq org-indirect-buffer-display 'current-window)
  #+end_src

** Tagging

- Define fast tags
  #+begin_src emacs-lisp
    (setq org-tag-alist (quote ((:startgroup)
                                ("@offline" . ?o)
                                ("@office" . ?a)
                                ("@home" . ?h)
                                (:endgroup)
                                ("SEATTLE" . ?S)
                                ("DUBLIN" . ?D)
                                ("crypt" . ?k))))
  #+end_src

- Allow setting single tags without the menu
  #+begin_src emacs-lisp
    (setq org-fast-tag-selection-single-key (quote expert))
  #+end_src

** Archiving

- Archive in =~/Documents/archived.org= under a file-based subtree, with status: =ARCHIVED=

#+begin_src emacs-lisp
  (require 'org-archive)
  (setq org-archive-mark-done "ARCHIVED")
  (setq org-archive-location "~/Documents/archived.org::* Archive: %s")
#+end_src

** Exporting

- Exporting to Mediawiki is useful for wiki drafting
  #+begin_src emacs-lisp
    (require 'ox-mediawiki)
  #+end_src

** Checklists
   - Enable the checklist magic
     #+begin_src emacs-lisp
       (require 'org-checklist)
     #+end_src

** Deft
   [[http://jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing
   directories of plain text notes, inspired by Notational Velocity.

   #+begin_src emacs-lisp
     (install-packages-if-needed 'deft)
     (setq deft-extension "org")
     (setq deft-directory org-directory)
     (setq deft-text-mode 'org-mode)
     (setq deft-use-filename-as-title t)
     (global-set-key [f5] 'deft)
   #+end_src

** Encryption
   - Encrypt with a symmetric key all subtrees tagged as =:crypt:= on
     save.
     #+begin_src emacs-lisp
       (require 'org-crypt)
       (org-crypt-use-before-save-magic)
       (setq org-tags-exclude-from-inheritance (quote ("crypt")))
       ;; GPG key to use for encryption
       ;; Either the Key ID or set to nil to use symmetric encryption.
       (setq org-crypt-key nil)
     #+end_src

     - Decrypt entr(y|ies)
       #+begin_src emacs-lisp
         (defun org-decrypt-dwim (arg)
           "Decrypt entry, but decrypt entries if ARG is passed."
           (interactive "P")
           (if arg
               (org-decrypt-entries)
             (org-decrypt-entry)))

         (add-hook 'org-mode-hook
                   (lambda ()
                     (define-key
                       org-mode-map
                       (kbd "C-c s-c") 'org-decrypt-dwim)))
       #+end_src

** Extra links
    - Make any headline in the same directory made only of a CamelCaseWord a link.
       #+begin_src emacs-lisp
         (require 'org-wikinodes)
         (setq org-wikinodes-scope 'directory)
       #+end_src

    - On the Mac, get links from external apps (e.g. current selected mail in Outlook, current page in Chrome)
      #+begin_src emcas-lisp
      (require 'org-mac-link)
      (add-hook 'org-mode-hook (lambda ()
                                 (define-key org-mode-map (kbd "C-c C-g") 'org-mac-grab-link)))
      #+end_src
